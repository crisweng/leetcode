class Solution {
public:
    bool canJump(int A[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(n <= 1) return true;
        vector<bool> f(n, false);
        f[0] = true;
        for(int i = 0; i < n; i++){
            if(f[i] && A[i] > 0){
                for(int j = i + A[i]; j >= i; j--){
                    if(j >= n - 1) return true;
                    if(f[j] == true){
                        break;
                    }
                    f[j] = true;
                }
            }
        }
        return f[n - 1];
    }
};


More cleaner code
class Solution {
public:
    bool canJump(int A[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(n <= 1) return true;
        int last = 0;
        for(int i = 0; i <= last && last < n; i++){
            last = max(last, A[i] + i);
        }
        
        return last >= n - 1;
    }
};
