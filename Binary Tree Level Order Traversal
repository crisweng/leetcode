/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ans;
        if(root == NULL) return ans;
        queue<pair<TreeNode *, int> > q;
        pair<TreeNode*, int> now = make_pair(root, 1);
        int level = 1;
        q.push(now);
        vector<int> v;
        while(!q.empty()){
            pair<TreeNode *,int> tmp = q.front();
            q.pop();
            if(level != tmp.second){
                level++;
                ans.push_back(v);
                v.clear();
            }
            v.push_back(tmp.first->val);
            if(tmp.first->left){
                q.push(make_pair(tmp.first->left,level + 1));
            }
             if(tmp.first->right){
                q.push(make_pair(tmp.first->right, level + 1));
            }
        }
        ans.push_back(v);//easy error
        return ans;
    }
};


/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > levelOrder(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > ans;
        if(root == NULL) return ans;
        vector<TreeNode *> store;
        store.push_back(root);
        int i = 0;
        int size = store.size();
        vector<int> now;
        while(i < size){ 
            now.clear();
            for(int j = i; j < size; j++){
                now.push_back(store[j]->val);//循环里都把j写成了i,粗心
                if(store[j]->left){
                    store.push_back(store[j]->left);
                }
                if(store[j]->right){
                    store.push_back(store[j]->right);
                }
            }
            
            ans.push_back(now);
            i = size;
            size = store.size();
        }
        return ans;
    } 
};
