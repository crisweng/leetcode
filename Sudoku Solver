class Solution {
public:
    bool judge(vector<vector<char> > &board, int x, int y, char v){
        for(int i = 0; i < 9; i++){
            if(board[x][i] == v) return false;
            if(board[i][y] == v) return false;
        }
        
        int i = (x/3)*3;
        int j = (y/3)*3;
        for(int k = 0; k < 3; k++){
            for(int q = 0; q < 3; q++){
                if(board[i + k][j + q] == v) return false;
            }
        }
        
        return true;
    }
    bool GetSudoKu(vector<vector<char> > &board, int x, int y){
        if(y == 9){
            x++;
            y = 0;
            
        }
        if(x == 9){
            return true;
        }
        
        if(board[x][y] != '.'){
            return GetSudoKu(board, x, y + 1);
        }
        
        for(int i = 1; i <= 9; i++){
            if(judge(board, x, y, '0' + i)){
                board[x][y] = '0' + i;
                if(GetSudoKu(board, x, y + 1)) return true;
                board[x][y] = '.';
            }
        }
        
        return false;
    }
    void solveSudoku(vector<vector<char> > &board) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        GetSudoKu(board, 0, 0);
    }
};
