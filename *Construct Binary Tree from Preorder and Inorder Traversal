/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildBTree(vector<int> &preorder, vector<int> &inorder, int a, int n, int b, int m){
        int key = preorder[a];
        TreeNode *root = new TreeNode(key);
        int l = -1;
        for(int i = b; i < m; i++){
            if(inorder[i] == key){
                l = i;
                break;
            }
        }
        if(l > b){
            root->left = buildBTree(preorder, inorder, a + 1, a + 1 + l - b, b, l);
        }
        
        if(l < m - 1){
            root->right = buildBTree(preorder, inorder, a + 1 + l - b, n, l + 1, m);
        }
        
        return root;
        
    }
    
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int n = preorder.size();
        int m = inorder.size();
        if(n != m || n == 0) return NULL;
        return buildBTree(preorder, inorder, 0, n, 0, m);
    }
};
