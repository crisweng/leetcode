/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int find(vector<Interval> &intervals, int val){
		int l = 0, r = intervals.size() - 1;
		int m;
		int loc = -1;
		while(l <= r){
			m = l + (r - l)/2;
			if(intervals[m].start <= val){
				l = m + 1;
				loc = m;
			}else {
				r = r - 1;
			}
		}
		
		return loc;
	}
    vector<Interval> insert(vector<Interval> &intervals, Interval newInterval) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<Interval> ans;
		int n = intervals.size();
		if(n == 0){
			ans.push_back(newInterval);
			return ans;
		}
		
		int l = find(intervals, newInterval.start);//find the closest element.start that less or equal to newsInterval.start.
		int r = find(intervals, newInterval.end);//find the closest element.start that less or equal to newsInterval.start.
		if(l >= 0 && intervals[l].end >= newInterval.start){
			newInterval.start = intervals[l].start;
			l--;
		}
		
		if(r >= 0 && intervals[r].end > newInterval.end){
			newInterval.end = intervals[r].end;
		}
		r++;
		
		for(int i = 0; i <= l; i++){
			ans.push_back(intervals[i]);
		}
		ans.push_back(newInterval);
		for(int i = r; i < n; i++){
			ans.push_back(intervals[i]);
		}
		
		return ans;
		
    }
};
