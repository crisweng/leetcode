class Solution {
public:
    int jump(int A[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if(n <= 1) return 0;
        vector<int> f(n, -1);
        f[0] = 0;
        for(int i = 0; i < n - 1; i++){
            if(f[i] == -1) return -1; 
            for(int j = i + A[i]; j >= i; j--){
                if(j >= n){
                    j = n - 1;
                }
                if(f[j] != - 1){
                    break;
                }
                f[j] = f[i] + 1;
            }
        }
        return f[n - 1];
    }
};

More cleaner code
class Solution {
public:
    int jump(int A[], int n) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int step = 0;
        int last = 0;
        int cur = 0;
        for(int i = 0; i < n; i++){
            if(i > last){
                step++;
                last = cur;
            }
            cur = max(cur, A[i] + i);
        }
        
        if(last < n - 1) return -1;
        return step;
    }
};
